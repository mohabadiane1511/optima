generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id           String   @id @default(cuid())
  slug         String   @unique
  name         String
  description  String?
  contactEmail String?
  contactPhone String?
  // Informations légales et commerciales
  businessRegistration String? // Registre de commerce
  ninea               String? // NINEA
  address            String? // Adresse complète
  website            String? // Site web
  logoUrl            String? // URL du logo
  status       String   @default("active") // 'active' | 'inactive'
// Plan & limitations (snapshot au niveau du tenant)
  planId       String?
  planCode     String?
  maxUsers     Int?
  allowedModules String[] @default([])
  overLimit    Boolean  @default(false)
  // Facturation (auto)
  billingFrequency   String   @default("monthly") // 'monthly' | 'annual'
  billingAnchorDay   Int?
  billingAnchorMonth Int?
  dueDays            Int      @default(15)
  autoBillingEnabled Boolean  @default(true)
  nextInvoiceAt      DateTime?
  lastInvoicedPeriod String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  memberships  Membership[]
  domains      Domain[]
  auditLogs    AuditLog[]
  plan         Plan?    @relation(fields: [planId], references: [id])
  billingInvoices BillingInvoice[]

  @@index([autoBillingEnabled, nextInvoiceAt])
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  passwordHash String?
  mustChangePassword Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  memberships Membership[]
}

model Membership {
  id        String   @id @default(cuid())
  tenantId  String
  userId    String
  role      String   // 'owner' | 'admin' | 'viewer'
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([tenantId, userId])
}

model Domain {
  id        String   @id @default(cuid())
  tenantId  String
  host      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
}

// Catalogue & Stock (sans entrepôts)
model Category {
  id        String   @id @default(cuid())
  tenantId  String
  name      String
  products  Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
}

model Product {
  id            String   @id @default(cuid())
  tenantId      String
  sku           String   @unique
  name          String
  categoryId    String?
  category      Category? @relation(fields: [categoryId], references: [id])
  unit          String   @default("unité")
  purchasePrice Decimal  @db.Decimal(12,2)
  salePrice     Decimal  @db.Decimal(12,2)
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  stocks        Stock[]
  invoiceLines  InvoiceLine[]

  @@index([tenantId])
  @@index([tenantId, categoryId])
}

model Stock {
  id         String   @id @default(cuid())
  tenantId   String
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  qtyOnHand  Decimal  @db.Decimal(12,2) @default(0)
  reorderPoint Decimal @db.Decimal(12,2) @default(0)
  updatedAt  DateTime @updatedAt

  @@unique([tenantId, productId])
  @@index([tenantId])
}

model StockMovement {
  id         String   @id @default(cuid())
  tenantId   String
  productId  String
  type       String   // 'IN' | 'OUT' | 'ADJUST'
  qty        Decimal  @db.Decimal(12,2)
  cost       Decimal? @db.Decimal(12,2)
  reason     String?
  createdBy  String?
  createdAt  DateTime @default(now())

  @@index([tenantId])
  @@index([tenantId, productId])
}


// Ventes & Facturation 
model Customer {
  id         String   @id @default(cuid())
  tenantId   String
  name       String
  email      String?
  phone      String?
  address    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  invoices   Invoice[]

  @@index([tenantId])
}

model Invoice {
  id         String   @id @default(cuid())
  tenantId   String
  customerId String
  number     String?  @unique // assigné à l'émission
  status     String   @default("draft") // draft | sent | paid | overdue | cancelled
  issueDate  DateTime? // date d'émission
  dueDate    DateTime?
  totalHT    Decimal  @db.Decimal(12,2) @default(0)
  totalTVA   Decimal  @db.Decimal(12,2) @default(0)
  totalTTC   Decimal  @db.Decimal(12,2) @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id])
  lines      InvoiceLine[]
  payments   Payment[]

  @@index([tenantId])
  @@index([tenantId, customerId])
}

model InvoiceLine {
  id         String   @id @default(cuid())
  tenantId   String
  invoiceId  String
  productId  String?
  name       String
  sku        String?
  qty        Decimal  @db.Decimal(12,2)
  unit       String   @default("unité")
  unitPrice  Decimal  @db.Decimal(12,2)
  tvaRate    Decimal  @db.Decimal(5,2) @default(0) // %
  totalHT    Decimal  @db.Decimal(12,2)
  totalTVA   Decimal  @db.Decimal(12,2)
  totalTTC   Decimal  @db.Decimal(12,2)
  createdAt  DateTime @default(now())
  invoice    Invoice  @relation(fields: [invoiceId], references: [id])
  product    Product? @relation(fields: [productId], references: [id])

  @@index([tenantId])
  @@index([tenantId, invoiceId])
}

model Payment {
  id         String   @id @default(cuid())
  tenantId   String
  invoiceId  String
  amount     Decimal  @db.Decimal(12,2)
  method     String   // cash | card | transfer | mobile
  reference  String?
  paidAt     DateTime @default(now())
  createdAt  DateTime @default(now())
  invoice    Invoice  @relation(fields: [invoiceId], references: [id])

  @@index([tenantId])
  @@index([tenantId, invoiceId])
}


// Journalisation des actions (audit)
model AuditLog {
  id         String   @id @default(cuid())
  tenantId   String
  actorId    String?
  actorName  String?
  actorEmail String?
  actorType  String   @default("user") // user | system | anonymous
  action     String
  entity     String
  entityId   String?
  source     String?  // api | ui | job | webhook
  route      String?
  method     String?
  ip         String?
  userAgent  String?
  requestId  String?
  before     Json?
  after      Json?
  metadata   Json?
  createdAt  DateTime @default(now())

  tenant     Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId, createdAt])
  @@index([tenantId, action, createdAt])
  @@index([tenantId, entity, entityId, createdAt])
  @@index([requestId])
}

// Plans tarifaires (Option A)
model Plan {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String
  priceMonthlyFCFA  Decimal @db.Decimal(12,2)
  priceYearlyFCFA   Decimal @db.Decimal(12,2)
  includedUsers     Int
  extraUserCreationFeeFCFA Decimal @db.Decimal(12,2)
  extraUserMonthlyFeeFCFA  Decimal @db.Decimal(12,2)
  modules  String[]
  quotas   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenants  Tenant[]
}

// Factures d'abonnement (snapshot des montants et du plan au moment d'émission)
model BillingInvoice {
  id           String   @id @default(cuid())
  tenantId     String
  period       String   // 'AAAA-MM' (mensuel) ou 'AAAA' (annuel)
  frequency    String   // 'monthly' | 'annual'
  planCode     String
  planName     String
  includedUsers Int
  activeUsers   Int
  extrasCount   Int
  baseAmount    Int      // FCFA
  extrasAmount  Int      // FCFA
  totalAmount   Int      // FCFA
  currency      String   @default("FCFA")
  status        String   @default("issued") // draft | issued | paid | overdue | cancelled
  issuedAt      DateTime @default(now())
  dueAt         DateTime?
  paidAt        DateTime?
  notes         String?
  pdfUrl        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tenant        Tenant   @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, period])
  @@index([tenantId, status, issuedAt])
}


// Achats — Demandes de prix (RFQ) et Commandes d'achat (PO)
model Supplier {
  id        String   @id @default(cuid())
  tenantId  String
  name      String
  email     String?
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
  @@index([tenantId, name])
}

model Rfq {
  id         String     @id @default(cuid())
  tenantId   String
  status     String     @default("draft") // draft | sent | closed
  note       String?
  suppliers  String[]   // identifiants libre (nom/email) pour l'UI actuelle
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  lines      RfqLine[]
  offers     RfqOffer[]
  purchaseOrders PurchaseOrder[]

  @@index([tenantId])
  @@index([tenantId, status, createdAt])
}

model RfqLine {
  id             String   @id @default(cuid())
  tenantId       String
  rfqId          String
  item           String
  quantity       Decimal  @db.Decimal(12,2)
  estimatedPrice Decimal  @db.Decimal(12,2)
  taxRate        Decimal  @db.Decimal(5,2) @default(0)
  createdAt      DateTime @default(now())
  rfq            Rfq      @relation(fields: [rfqId], references: [id])
  offers         RfqOffer[]

  @@index([tenantId])
  @@index([tenantId, rfqId])
}

model RfqOffer {
  id        String   @id @default(cuid())
  tenantId  String
  rfqId     String
  lineId    String
  supplier  String   // identifiant libre (nom/email)
  price     Decimal  @db.Decimal(12,2)
  lead      Int      // délai (jours)
  notes     String?
  createdAt DateTime @default(now())
  rfq       Rfq      @relation(fields: [rfqId], references: [id])
  line      RfqLine  @relation(fields: [lineId], references: [id])

  @@index([tenantId])
  @@index([tenantId, rfqId])
  @@index([tenantId, lineId])
}

model PurchaseOrder {
  id         String   @id @default(cuid())
  tenantId   String
  rfqId      String?
  supplier   String
  status     String   @default("created") // created | confirmed | received
  totalHT    Decimal  @db.Decimal(12,2) @default(0)
  totalTVA   Decimal  @db.Decimal(12,2) @default(0)
  totalTTC   Decimal  @db.Decimal(12,2) @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  rfq        Rfq?     @relation(fields: [rfqId], references: [id])
  lines      PurchaseOrderLine[]
  goodsReceipt GoodsReceipt?

  @@index([tenantId])
  @@index([tenantId, supplier])
}

model PurchaseOrderLine {
  id              String   @id @default(cuid())
  tenantId        String
  purchaseOrderId String
  name            String
  qty             Decimal  @db.Decimal(12,2)
  unit            String   @default("unité")
  unitPrice       Decimal  @db.Decimal(12,2)
  taxRate         Decimal  @db.Decimal(5,2) @default(0)
  totalHT         Decimal  @db.Decimal(12,2)
  totalTVA        Decimal  @db.Decimal(12,2)
  totalTTC        Decimal  @db.Decimal(12,2)
  createdAt       DateTime @default(now())
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receiptEntryLines GoodsReceiptEntryLine[]
  supplierInvoiceLines SupplierInvoiceLine[]

  @@index([tenantId])
  @@index([tenantId, purchaseOrderId])
}

// Achats — Réception (une seule réception par PO) avec journal des lots partiels
model GoodsReceipt {
  id               String   @id @default(cuid())
  tenantId         String
  purchaseOrderId  String   @unique
  status           String   @default("not_received") // not_received | partial | received
  note             String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  entries          GoodsReceiptEntry[]

  @@index([tenantId])
}

model GoodsReceiptEntry {
  id             String   @id @default(cuid())
  tenantId       String
  goodsReceiptId String
  note           String?
  createdBy      String?
  createdAt      DateTime @default(now())
  goodsReceipt   GoodsReceipt @relation(fields: [goodsReceiptId], references: [id])
  lines          GoodsReceiptEntryLine[]

  @@index([tenantId])
  @@index([tenantId, goodsReceiptId])
}

model GoodsReceiptEntryLine {
  id                    String   @id @default(cuid())
  tenantId              String
  entryId               String
  purchaseOrderLineId   String
  qtyReceived           Decimal  @db.Decimal(12,2)
  entry                 GoodsReceiptEntry @relation(fields: [entryId], references: [id])
  purchaseOrderLine     PurchaseOrderLine @relation(fields: [purchaseOrderLineId], references: [id])

  @@index([tenantId])
  @@index([tenantId, entryId])
  @@index([tenantId, purchaseOrderLineId])
}

// Achats — Factures fournisseurs (comptable légère)
model SupplierInvoice {
  id               String   @id @default(cuid())
  tenantId         String
  purchaseOrderId  String   // une facture par commande (réception complète requise)
  goodsReceiptId   String   // réception liée (doit être 'received')
  supplier         String?
  number           String?
  status           String   @default("draft") // draft | posted | paid | cancelled
  invoiceDate      DateTime @default(now())
  dueDate          DateTime?
  totalHT          Decimal  @db.Decimal(12,2) @default(0)
  totalTVA         Decimal  @db.Decimal(12,2) @default(0)
  totalTTC         Decimal  @db.Decimal(12,2) @default(0)
  attachmentUrl        String?
  attachmentPublicId   String?
  attachmentName       String?
  attachmentSize       Int?
  uploadedAt           DateTime?
  note             String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  lines            SupplierInvoiceLine[]
  payments         SupplierPayment[]

  @@index([tenantId])
  @@index([tenantId, status, invoiceDate])
  @@unique([tenantId, number])
  @@unique([tenantId, purchaseOrderId])
}

model SupplierInvoiceLine {
  id                  String   @id @default(cuid())
  tenantId            String
  invoiceId           String
  purchaseOrderLineId String?
  name                String
  qty                 Decimal  @db.Decimal(12,2)
  unit                String   @default("unité")
  unitPrice           Decimal  @db.Decimal(12,2)
  taxRate             Decimal  @db.Decimal(5,2) @default(0)
  totalHT             Decimal  @db.Decimal(12,2)
  totalTVA            Decimal  @db.Decimal(12,2)
  totalTTC            Decimal  @db.Decimal(12,2)
  createdAt           DateTime @default(now())
  invoice             SupplierInvoice @relation(fields: [invoiceId], references: [id])
  purchaseOrderLine   PurchaseOrderLine? @relation(fields: [purchaseOrderLineId], references: [id])

  @@index([tenantId])
  @@index([tenantId, invoiceId])
}

model SupplierPayment {
  id         String   @id @default(cuid())
  tenantId   String
  invoiceId  String
  amount     Decimal  @db.Decimal(12,2)
  method     String   // cash | transfer | mobile | card | other
  reference  String?
  paidAt     DateTime @default(now())
  createdAt  DateTime @default(now())
  invoice    SupplierInvoice @relation(fields: [invoiceId], references: [id])

  @@index([tenantId])
  @@index([tenantId, invoiceId])
}

// Idempotence pour certaines actions (ex: send RFQ, convert RFQ)
model IdempotencyKey {
  id        String   @id @default(cuid())
  tenantId  String
  key       String
  action    String
  entity    String?
  entityId  String?
  response  Json?
  createdAt DateTime @default(now())

  @@unique([tenantId, key, action])
  @@index([tenantId, action, createdAt])
}

