generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id           String   @id @default(cuid())
  slug         String   @unique
  name         String
  description  String?
  contactEmail String?
  contactPhone String?
  status       String   @default("active") // 'active' | 'inactive'
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  memberships  Membership[]
  domains      Domain[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  passwordHash String?
  mustChangePassword Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  memberships Membership[]
}

model Membership {
  id        String   @id @default(cuid())
  tenantId  String
  userId    String
  role      String   // 'owner' | 'admin' | 'manager' | 'viewer'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([tenantId, userId])
}

model Domain {
  id        String   @id @default(cuid())
  tenantId  String
  host      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
}

// Catalogue & Stock (sans entrepôts)
model Category {
  id        String   @id @default(cuid())
  tenantId  String
  name      String
  products  Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
}

model Product {
  id            String   @id @default(cuid())
  tenantId      String
  sku           String   @unique
  name          String
  categoryId    String?
  category      Category? @relation(fields: [categoryId], references: [id])
  unit          String   @default("unité")
  purchasePrice Decimal  @db.Decimal(12,2)
  salePrice     Decimal  @db.Decimal(12,2)
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  stocks        Stock[]
  invoiceLines  InvoiceLine[]

  @@index([tenantId])
  @@index([tenantId, categoryId])
}

model Stock {
  id         String   @id @default(cuid())
  tenantId   String
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  qtyOnHand  Decimal  @db.Decimal(12,2) @default(0)
  reorderPoint Decimal @db.Decimal(12,2) @default(0)
  updatedAt  DateTime @updatedAt

  @@unique([tenantId, productId])
  @@index([tenantId])
}

model StockMovement {
  id         String   @id @default(cuid())
  tenantId   String
  productId  String
  type       String   // 'IN' | 'OUT' | 'ADJUST'
  qty        Decimal  @db.Decimal(12,2)
  cost       Decimal? @db.Decimal(12,2)
  reason     String?
  createdBy  String?
  createdAt  DateTime @default(now())

  @@index([tenantId])
  @@index([tenantId, productId])
}


// Ventes & Facturation 
model Customer {
  id         String   @id @default(cuid())
  tenantId   String
  name       String
  email      String?
  phone      String?
  address    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  invoices   Invoice[]

  @@index([tenantId])
}

model Invoice {
  id         String   @id @default(cuid())
  tenantId   String
  customerId String
  number     String?  @unique // assigné à l'émission
  status     String   @default("draft") // draft | sent | paid | overdue | cancelled
  issueDate  DateTime? // date d'émission
  dueDate    DateTime?
  totalHT    Decimal  @db.Decimal(12,2) @default(0)
  totalTVA   Decimal  @db.Decimal(12,2) @default(0)
  totalTTC   Decimal  @db.Decimal(12,2) @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id])
  lines      InvoiceLine[]
  payments   Payment[]

  @@index([tenantId])
  @@index([tenantId, customerId])
}

model InvoiceLine {
  id         String   @id @default(cuid())
  tenantId   String
  invoiceId  String
  productId  String?
  name       String
  sku        String?
  qty        Decimal  @db.Decimal(12,2)
  unit       String   @default("unité")
  unitPrice  Decimal  @db.Decimal(12,2)
  tvaRate    Decimal  @db.Decimal(5,2) @default(0) // %
  totalHT    Decimal  @db.Decimal(12,2)
  totalTVA   Decimal  @db.Decimal(12,2)
  totalTTC   Decimal  @db.Decimal(12,2)
  createdAt  DateTime @default(now())
  invoice    Invoice  @relation(fields: [invoiceId], references: [id])
  product    Product? @relation(fields: [productId], references: [id])

  @@index([tenantId])
  @@index([tenantId, invoiceId])
}

model Payment {
  id         String   @id @default(cuid())
  tenantId   String
  invoiceId  String
  amount     Decimal  @db.Decimal(12,2)
  method     String   // cash | card | transfer | mobile
  reference  String?
  paidAt     DateTime @default(now())
  createdAt  DateTime @default(now())
  invoice    Invoice  @relation(fields: [invoiceId], references: [id])

  @@index([tenantId])
  @@index([tenantId, invoiceId])
}


