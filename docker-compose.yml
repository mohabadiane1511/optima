version: "3.9"

services:
  db:
    image: postgres:16-alpine
    container_name: optima-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: optima
      POSTGRES_PASSWORD: optima
      POSTGRES_DB: optima
    ports:
      - "5433:5432"
    volumes:
      - db-data:/var/lib/postgresql/data

  adminer:
    image: adminer:4
    container_name: optima-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: db
    depends_on:
      - db

  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: optima-web
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://optima:optima@db:5432/optima?schema=public
      - NODE_ENV=development
      - NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=${NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME}
      - NEXT_PUBLIC_CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SECURE=${SMTP_SECURE}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_FROM=${SMTP_FROM}
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - db

  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: optima-scheduler
    restart: unless-stopped
    command: node scripts/audit-scheduler.mjs
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://optima:optima@db:5432/optima?schema=public
      - NODE_ENV=development
      - AUDIT_RETENTION_DAYS=30
      - AUDIT_WARN_DAYS=2
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SECURE=${SMTP_SECURE}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_FROM=${SMTP_FROM}
    # Pas de volumes pour éviter d'écraser node_modules dans l'image
    depends_on:
      - db

volumes:
  db-data:


